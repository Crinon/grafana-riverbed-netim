{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","IDplugin","id","deviceID","urlDatasource","url","jsonData","username","password","datasourceUserName","datasourceUserPassword","urlDevices","urlBaseInterfaces","urlMetricClasses","urlBaseMetrics","urlReport","lastTimeYouWereDevicesList","bufferMaxTime","timeListDevices","devicesList","interfacesList","metricClassesList","metricsFromMetricClassList","lastMectricClassIDcalled","lastTimeYouWereInterfacesList","timeListInterfaces","lastTimeYouWereMetricClassesList","timeListMetricClasses","lastTimeYouWereMetricsList","lastTimeYouWeremetricsFromMetricClassList","graal","q","withCredentials","headers","basicAuth","length","doRequest","method","then","response","status","message","title","options","datasourceRequest","query","interpolated","target","replace","data","mapToTextValue","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","map","d","i","text","value","isObject","targets","filter","scopedVars","refId","hide","metricID","interfaceID","metricClassID","differenciation","selectedCurve","DOMextractedRefID","rollupType","listOfCurves","displayDifferenciationAndCurveBox","timeshift","customAlias","Promise","resolve","reject","decimals","Number","Math","round","letter","charCodeAt","Date","now","responseDevices","k","items","push","deviceSelected","split","urlFullInterfaces","responseInterfaces","responseMetricClasses","mectricClassID","timeThisListMetrics","metricClassSelected","urlFullMetrics","responseMetricsOfClass","metrics","units","displayName","rowRefId","index","indexOf","differenciationList","curvesList","rollupList","buildQueryParameters","currentGraal","t","when","getAdhocFilters","adhocFilters","dataDefsWithList","metricSplitted","objectType","objectId","queryTimeMillisecFrom","queryTimeMillisecTo","allKeysWithId","tempoTab","metricHere","differenciationSelected","rollupBoolean","rollupSelected","sourceType","metricsForLegend","devicesForLegend","interfacesForLegend","deviceOrInterfaceName","metricId","booleanArrayQueryReady","rollupListFormated","deltaTimeshift","deux","dataPointsForGrafana","SOLIDqueryTimeMillisecFrom","from","getTime","SOLIDqueryTimeMillisecTo","to","parseInt","console","log","metricSelected","objectSelected","dataDefs","fixedataDefsWithList","x","datadefsWithLetter","mirror","found","indexOfDuplicate","alreadyFound","dupCounter","includes","dupCounterBis","JSON","stringify","counter","sendingDataWithLetter","sendingData","indexOfLetterInDataDefsSent","key","hasOwnProperty","promises","currentDataDefs","all","reserved","responseQuery","Object","freeze","finalLetteredResponse","letterToGet","corresIndex","u","realOrder","row","modify","currentQuery","datapoints","valeurs","samples","untilAllEmptyDatapointsAreDeleted","timestamp","splice","allKeys","keys","values","rollupListRaw","rollupAlgo","search","compte","convertAlphabetPosition","rollup","tryDefaultRollupAverage","find","a","rawResults","res","timeStampInteger","homeMadeRound","parseFloat","curvesAvalaibleList","curvesAvalaibleDatapointed","v","label","grafanaRefId","newTarget"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    // ID of the plugin (set in plugin.json)\n    this.type = instanceSettings.type;\n    // Name of the plugin (set in plugin.json)\n    this.name = instanceSettings.name;\n    // ID stored by Grafana\n    this.IDplugin = instanceSettings.id;\n    // Used for compilation by Grunt and query building\n    this.deviceID = instanceSettings.deviceID;\n    // Looks like '/api/datasources/proxy/{yourPluginIdGaveByGrafana}'. This proxy url avoids CORS issue\n    this.urlDatasource = instanceSettings.url;\n\n    // Theses login informations are set in plugin configuration page\n    // First condition avoids error when grunt is building\n    if (typeof instanceSettings.jsonData !== 'undefined') {\n      // Second condition verifies that username and password for AppResponse API are actually set in plugin's config page\n      if (typeof instanceSettings.jsonData.username !== 'undefined' && typeof instanceSettings.jsonData.password !== 'undefined') {\n        this.datasourceUserName = instanceSettings.jsonData.username;\n        this.datasourceUserPassword = instanceSettings.jsonData.password;\n      }\n    }\n\n    // API for devices list retrievement (url completed with Grafana proxy)\n    this.urlDevices = this.urlDatasource + '/api/netim/v1/devices';\n    // API for interfaces (from one device) list retrievement, deviceID is completed in function (url completed with Grafana proxy)\n    this.urlBaseInterfaces = this.urlDatasource + '/api/netim/v1/devices/';\n    // API for metric classes list retrievement (url completed with Grafana proxy)\n    this.urlMetricClasses = this.urlDatasource + '/api/netim/v1/metric-classes';\n    // API for metric list retrievement (metrics from metric-class selected) (url completed with Grafana proxy)\n    this.urlBaseMetrics = this.urlDatasource + '/api/netim/v1/metric-classes/';\n    // API for metric report creation (url completed with Grafana proxy)\n    this.urlReport = this.urlDatasource + '/api/netim/v1/metric-data';\n\n    // Following variables are used as timer, to avoid unecessary requests to NetIM\n    this.lastTimeYouWereDevicesList = 0;\n    this.bufferMaxTime = 120000;\n    this.timeListDevices = 0;\n\n    // Variable for query construction\n    this.devicesList = [];\n    this.interfacesList = [];\n    this.metricClassesList = [];\n    this.metricsFromMetricClassList = [];\n    this.lastMectricClassIDcalled;\n    // Variable use as timer to prevent spam\n    this.lastTimeYouWereInterfacesList = 0\n    this.timeListInterfaces = 0;\n    this.lastTimeYouWereMetricClassesList = 0;\n    this.timeListMetricClasses = 0;\n    this.lastTimeYouWereMetricsList = 0;\n    this.lastTimeYouWeremetricsFromMetricClassList = 0;\n\n    // With the Grail you have full access to both panel and datasource data\n    this.graal;\n\n    // Core variable\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    // Default headers for DoRequest() function    \n    this.headers = { 'Content-Type': 'application/json' };\n    // NetIM uses basic authentication\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  //#########################################################################################################################\n  //##                                                                                                                     ##\n  //##                                                     CORE FUNCTION                                                   ##\n  //##                                                                                                                     ##\n  //#########################################################################################################################\n\n  // Function to test if datasource is connected (only used when setting up the plugin in Grafana)\n  testDatasource() {\n    return this.doRequest({\n      url: '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  // Function to send http request, options are url(proxy+api_endpoint), data(if there is data to send), and method(GET or POST))\n  doRequest(options) {\n    // Adding credentials and headers from self attributes \n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // This function is used when Grunt build dist folder\n  metricFindQuery(query) {\n    let interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex')\n    };\n    return this.doRequest({\n      url: this.url + '/fake_url',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  // Annotation feature is not used in this plugin\n  annotationQuery(options) {\n    let query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    let annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  // Method giving the possibility to display text  but select id\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      // If there is an object with .value and .txt attribute in JSON\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      }\n      // ???\n      else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      // In other cases just display same text and value\n      return { text: d, value: d };\n    });\n  }\n\n\n\n  // Method to construct the JSON that will be send to function query()\n  buildQueryParameters(options) {\n    // Extract targets array from object into simple array containing each target\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    // This variable is the JSON sent to function query()\n    // Create an array containing every target, each target contains the following fields :\n    let targets = _.map(options.targets, target => {\n      return {\n        // Each attribute is a field of the JSON\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        deviceID: target.deviceID,\n        metricID: target.metricID,\n        interfaceID: target.interfaceID,\n        metricClassID: target.metricClassID,\n        differenciation: target.differenciation,\n        selectedCurve: target.selectedCurve,\n        DOMextractedRefID: target.DOMextractedRefID,\n        rollupType: target.rollupType,\n        type: target.type || '',\n        listOfCurves: target.listOfCurves,\n        displayDifferenciationAndCurveBox: target.displayDifferenciationAndCurveBox,\n        timeshift: target.timeshift,\n        customAlias: target.customAlias\n      };\n    });\n    options.targets = targets;\n    return options;\n  }\n\n  // These two last methods are not used in this datasource for the moment\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n\n  //#########################################################################################################################\n  //##                                                                                                                     ##\n  //##                                                     MY FUNCTIONS                                                    ##\n  //##                                                                                                                     ##\n  //#########################################################################################################################\n\n  // Round value\n  homeMadeRound(value, decimals) {\n    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n  }\n\n  // Convert letter to his alaphabet position\n  convertAlphabetPosition(letter) {\n    return letter.charCodeAt(0) - 65;\n\n    // // Return grafana's row letter alphabetical position (e.g between 0 and 25)\n    // getGrafanaRowNumber() {\n    //   // Depending of Grafana version, retrieving row's letter may differ\n    //   let newlettre = $(document.activeElement).parents(\".query-editor-row\").find(\".query-editor-row__ref-id\").text();\n    //   let oldLettre = $(document.activeElement).parents(\".query-editor-row\").find(\".gf-form-query-letter-cell-letter\").text();\n    //   // 65 for uppercase, or 97 for lowercase\n    //   // if length of String oldLettre is 0, then retrieving row's letter from old version has failed, we use newletter\n    //   if (oldLettre.length == 0) {\n    //     return newlettre.charCodeAt(0) - 65;\n    //   } else {\n    //     return oldLettre.charCodeAt(0) - 65;\n    //   }\n    // }\n  }\n\n  //#########################################################################################################################\n  //##                                                                                                                     ##\n  //##                                                     ROUTE FUNCTION                                                  ##\n  //##                                                                                                                     ##\n  //#########################################################################################################################\n\n  // Ask NetIM all devices avalaible\n  netimGetAllDevices() {\n    // When openning your dashboard, Grafana repeats a lot the same request, this condition is used as anti-spam\n    if (Date.now() - this.lastTimeYouWereDevicesList < 100) {\n      return\n    }\n    this.lastTimeYouWereDevicesList = Date.now()\n\n    // Check if we need to build a fresh list of devices available\n    if (Date.now() - this.timeListDevices < this.bufferMaxTime) {\n      return this.devicesList;\n    }\n\n    // If bufferMaxTime is passed, build a new devices list\n    return this.doRequest({\n      url: this.urlDevices,\n      method: 'GET'\n    }).then(\n      (responseDevices) => {\n        // Verify if request has failed \n        if (typeof responseDevices === 'undefined') {\n          this.devicesList = []\n        } else {\n          // If successfull, store result as {'text': name, 'value': id}\n          this.devicesList = [];\n          for (let k in responseDevices.data.items) {\n            this.devicesList.push({ 'text': responseDevices.data.items[k].name, 'value': responseDevices.data.items[k].name + ' {id}' + responseDevices.data.items[k].id });\n          }\n          this.timeListDevices = Date.now()\n        }\n        return this.devicesList\n      }\n    )\n  }\n\n  // Ask NetIM all interfaces available from device selected\n  netimGetInterfacesFromDevice(deviceID) {\n    let deviceSelected\n    if (deviceID === '' || typeof deviceID === 'undefined') {\n      return\n    } else {\n      // Gathering only id\n      deviceSelected = deviceID.split(' {id}')[1]\n    }\n    let urlFullInterfaces = this.urlBaseInterfaces + deviceSelected + '/interfaces'\n\n    // When openning your dashboard, Grafana repeats a lot the same request, this condition is used as anti-spam\n    if (Date.now() - this.lastTimeYouWereInterfacesList < 100) {\n      return\n    }\n    this.lastTimeYouWereInterfacesList = Date.now()\n\n    // Check if we need to build a fresh list of interfaces available\n    if (Date.now() - this.timeListInterfaces < 3000) {\n      return this.interfacesList;\n    }\n\n    // If 3 secondes passed, build a new interfaces list\n    return this.doRequest({\n      url: urlFullInterfaces,\n      method: 'GET'\n    }).then(\n      (responseInterfaces) => {\n        // Verify if request has failed \n        if (typeof responseInterfaces === 'undefined') {\n          this.interfacesList = []\n        } else {\n          // If successfull, store result as {'text': name, 'value': id}\n          this.interfacesList = [];\n          for (let k in responseInterfaces.data.items) {\n            this.interfacesList.push({ 'text': responseInterfaces.data.items[k].name, 'value': responseInterfaces.data.items[k].name + ' {id}' + responseInterfaces.data.items[k].id });\n          }\n          this.timeListInterfaces = Date.now()\n        }\n        return this.interfacesList\n      }\n    )\n  }\n\n  // Ask NetIM all metric-class avalaible\n  netimGetAllMetricClasses() {\n    // When openning your dashboard, Grafana repeats a lot the same request, this condition is used as anti-spam\n    if (Date.now() - this.lastTimeYouWereMetricClassesList < 100) {\n      return\n    }\n    this.lastTimeYouWereMetricClassesList = Date.now()\n\n    // Check if we need to build a fresh list of metric classes available\n    if (Date.now() - this.timeListMetricClasses < this.bufferMaxTime) {\n      return this.metricClassesList;\n    }\n\n    // If bufferMaxTime is passed, build a new metric-class list\n    return this.doRequest({\n      url: this.urlMetricClasses,\n      method: 'GET'\n    }).then(\n      (responseMetricClasses) => {\n        // Verify if request has failed \n        if (typeof responseMetricClasses === 'undefined') {\n          this.metricClassesList = []\n        } else {\n          // If successfull, store result as {'text': name, 'value': id}\n          this.metricClassesList = [];\n          for (let k in responseMetricClasses.data.items) {\n            this.metricClassesList.push({ 'text': responseMetricClasses.data.items[k].name, 'value': responseMetricClasses.data.items[k].name + ' {id}' + responseMetricClasses.data.items[k].id });\n          }\n          this.timeListMetricClasses = Date.now()\n        }\n        return this.metricClassesList\n      }\n    )\n  }\n\n  // Ask NetIM all metrics available from metric-class selected\n  netimGetMetricsFromClass(mectricClassID) {\n    // If user did not click on metric-class from another row before the current row, and if the list is not outdated\n    if (this.lastMectricClassIDcalled === mectricClassID && Date.now() - this.timeThisListMetrics < this.bufferMaxTime) {\n      return this.metricsFromMetricClassList\n    }\n    this.lastMectricClassIDcalled = mectricClassID\n\n    // At initialization, plugin automaticaly tries this end point without any parameter, avoiding crash by testing parameter\n    if (mectricClassID === '' || typeof mectricClassID === 'undefined') {\n      return\n    }\n    // Gathering only id from parameter\n    let metricClassSelected = mectricClassID.split(' {id}')[1]\n    let urlFullMetrics = this.urlBaseMetrics + metricClassSelected\n\n    // When openning your dashboard, Grafana repeats a lot the same request, this condition is used as anti-spam\n    if (Date.now() - this.lastTimeYouWereMetricsList < 100) {\n      return\n    }\n    this.lastTimeYouWereMetricsList = Date.now()\n\n    // If bufferMaxTime is passed, build a new interfaces list\n    return this.doRequest({\n      url: urlFullMetrics,\n      method: 'GET'\n    }).then(\n      (responseMetricsOfClass) => {\n        // Verify if request has failed \n        if (typeof responseMetricsOfClass === 'undefined') {\n          this.metricsFromMetricClassList = []\n        } else {\n          // If successfull, store result as {'text': name, 'value': id}\n          this.metricsFromMetricClassList = [];\n          for (let k in responseMetricsOfClass.data.metrics.items) {\n            // If name field exists\n            if (responseMetricsOfClass.data.metrics.items[k].name != '' && responseMetricsOfClass.data.metrics.items[k].name !== null) {\n              // If 'units' field is not set, add (no units)\n              if (responseMetricsOfClass.data.metrics.items[k].units === null || responseMetricsOfClass.data.metrics.items[k].units === '') {\n                this.metricsFromMetricClassList.push({ 'text': responseMetricsOfClass.data.metrics.items[k].displayName + '  (no unit)', 'value': responseMetricsOfClass.data.metrics.items[k].displayName + '  (no unit)' + ' {id}' + responseMetricsOfClass.data.metrics.items[k].id });\n              } else {\n                // Else, use 'units' field\n                this.metricsFromMetricClassList.push({ 'text': responseMetricsOfClass.data.metrics.items[k].displayName + '  (' + responseMetricsOfClass.data.metrics.items[k].units + ')', 'value': responseMetricsOfClass.data.metrics.items[k].displayName + '  (' + responseMetricsOfClass.data.metrics.items[k].units + ')' + ' {id}' + responseMetricsOfClass.data.metrics.items[k].id });\n              }\n            }\n          }\n        }\n        this.timeThisListMetrics = Date.now()\n        return this.metricsFromMetricClassList\n      }\n    )\n  }\n\n  // Return the differenciation list for the row specified in parameter (differenciationList is built in query())\n  netimGetDifferenciationList(rowRefId) {\n    // Get index from letter (e.g. rowRefId) using the graal variable, which contains every row\n    // Looking for row's letter \"refId\" (for each target, build an array of all refId, and search rowRefId index in this new tab)\n    let index = this.graal.targets.map(function (target) { return target.refId; }).indexOf(rowRefId);\n    // First condition checks if rowRefId is correct, second checks if row is built\n    if (typeof rowRefId !== 'undefined' && typeof this.graal.targets[index] !== 'undefined') {\n      // Return the  \n      return this.graal.targets[index].differenciationList\n    }\n  }\n\n  // Return the curves list for the row specified in parameter (curves list is built in query())\n  netimGetCuvesList(rowRefId) {\n    // Get index from letter (e.g. rowRefId) using the graal variable, which contains every row\n    // Looking for row's letter \"refId\" (for each target, build an array of all refId, and search rowRefId index in this new tab)\n    let index = this.graal.targets.map(function (target) { return target.refId; }).indexOf(rowRefId);\n    // First condition checks if rowRefId is correct, second checks if row is built\n    if (typeof rowRefId !== 'undefined' && typeof this.graal.targets[index] !== 'undefined') {\n      // Checking if corresponding curve list is built\n      if (typeof this.graal.targets[index].curvesList !== 'undefined' && this.graal.targets[index].curvesList.length > 0) {\n        // Return the curvesList built earlier in Query() function\n        return this.graal.targets[index].curvesList\n      }\n    }\n  }\n\n  // Return the rollup list for the row specified in parameter (rollup list is built in query())\n  metricFindRollupQuery(rowRefId) {\n    // Get index from letter (e.g. rowRefId) using the graal variable, which contains every row\n    // Looking for row's letter \"refId\" (for each target, build an array of all refId, and search rowRefId index in this new tab)\n    let index = this.graal.targets.map(function (target) { return target.refId; }).indexOf(rowRefId);\n    // First condition checks if row exists, second checks if row is built\n    if (typeof rowRefId !== 'undefined' && typeof this.graal.targets[index] !== 'undefined') {\n      // Checking if corresponding rollup list is built\n      if (typeof this.graal.targets[index].rollupList === 'undefined' || this.graal.targets[index].rollupList.length === 0) {\n        return { 'text': 'nothing', 'value': 'nothing' };\n      }\n      // Return the curvesList built earlier in Query() function\n      return this.graal.targets[index].rollupList\n    }\n  }\n\n\n\n  //#########################################################################################################################\n  //##                                                                                                                     ##\n  //##                                                     QUERY                                                           ##\n  //##                                                                                                                     ##\n  //#########################################################################################################################\n\n  query(options) {\n    // Function buildQueryParameters() return all data contained in each row\n    let query = this.buildQueryParameters(options);\n    // This global variable is used to access to data in other functions\n    this.graal = query\n    // This is use when user use dashboard\n    const currentGraal = this.graal\n    // Disable any hidden query (\"eye\" button at the right of a row)\n    query.targets = query.targets.filter(t => !t.hide);\n\n    // Debugging purpose\n    // for (let i = 0; i <= query.targets.length; i++) {\n    //   console.log(\"Query \" + i);\n    //   console.log(query.targets[i]);\n    // }\n\n    // If no query row, stop here\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    let dataDefsWithList = [];\n    let metricSplitted = [];\n    let objectType;\n    let objectId;\n    let queryTimeMillisecFrom;\n    let queryTimeMillisecTo;\n    let allKeysWithId = [];\n    let tempoTab;\n    let selectedCurve;\n    let metricHere;\n    let metricClassSelected;\n    let deviceID;\n    let interfaceID;\n    let differenciationSelected;\n    let rollupBoolean;\n    let rollupSelected;\n    let sourceType;\n    let metricsForLegend = [];\n    let devicesForLegend = [];\n    let interfacesForLegend = [];\n    let deviceOrInterfaceName = \"A REMPLACER\";\n    let metricId = \"CHANGER\";\n    // This array is used for checking if query is ready or not\n    let booleanArrayQueryReady = [];\n    let rollupListFormated = [];\n    let deltaTimeshift;\n    let deux;\n\n    // List returned to Grafana at the very end of this function, will contain results\n    let dataPointsForGrafana = []\n    // Retrieving times queried from Grafana's JSON (string epoch format needed, in milliseconds)\n    let SOLIDqueryTimeMillisecFrom = ((new Date(query.range.from)).getTime());\n    let SOLIDqueryTimeMillisecTo = ((new Date(query.range.to)).getTime());\n\n    // For each row of Grafana query (A, B, C, D...) : send NetIM query and build results in appropriate format\n    for (let i in query.targets) {\n\n\n\n      //##################################################################\n      //##                   Dealing with timeshift                     ##\n      //##################################################################\n      // To do timeshift, we take Grafana query time, substract how many days back we need, do the request, add timeshift back to display correctly\n      // If timeshift field is empty, timeshift is set to 0\n      if (typeof query.targets[i].timeshift === \"undefined\" ||\n        (typeof query.targets[i].timeshift === \"string\" && query.targets[i].timeshift.length === 0)) {\n        query.targets[i].timeshift = 0;\n      }\n      // Timeshift is converted from string to number\n      query.targets[i].timeshift = parseInt(query.targets[i].timeshift)\n      // Timeshift is converted from day to milliseconds (and corrected by one seconds per day)\n      query.targets[i].timeshift = query.targets[i].timeshift * 86400 * 1000\n      // Store timeshift to calculate delta \n      deltaTimeshift = query.targets[i].timeshift\n\n      // Substract queryTime from timeshift \n      queryTimeMillisecFrom = SOLIDqueryTimeMillisecFrom - deltaTimeshift\n      queryTimeMillisecTo = SOLIDqueryTimeMillisecTo - deltaTimeshift\n\n\n\n      //##################################################################\n      //##       Checking if NetIM requests are ready to be send        ##\n      //##################################################################\n      // Check if a device has been selected (deviceID is device identifier)\n      deviceID = query.targets[i].deviceID\n      if (typeof deviceID === 'undefined') {\n        booleanArrayQueryReady[i] = false\n        console.log(\"#### REQUEST \", i, \" ABORTED (no device picked) #####\")\n        continue\n      }\n\n      // SourceType is one of device or interface\n      sourceType = query.targets[i].type\n      interfaceID = query.targets[i].interfaceID\n      if (sourceType === 'Interface' && interfaceID === '') {\n        booleanArrayQueryReady[i] = false\n        console.log(\"#### REQUEST \", i, \" ABORTED (no interface picked) #####\")\n        continue\n      }\n\n      // Check if a metricClass has been selected (metricClassID is metric class identifier)\n      let metricClassID = query.targets[i].metricClassID\n      if (metricClassID === '') {\n        booleanArrayQueryReady[i] = false\n        console.log(\"#### REQUEST \", i, \" ABORTED (no metric class picked) #####\")\n        continue\n      }\n      // Gathering only id\n      metricClassSelected = metricClassID.split(' {id}')[1]\n\n      // metricID is metric identifier\n      let metricID = query.targets[i].metricID\n      if (metricID === '') {\n        booleanArrayQueryReady[i] = false\n        console.log(\"#### REQUEST \", i, \" ABORTED (no metric picked) #####\")\n        continue\n      }\n      // Gathering only id\n      let metricSelected = metricID\n      metricSelected = metricID.split(' {id}')[1]\n\n      if (sourceType == 'Device') {\n        objectType = 'DEVICE'\n        objectId = query.targets[i].deviceID\n      }\n      if (sourceType == 'Interface') {\n        objectType = 'INTERFACE'\n        objectId = query.targets[i].interfaceID\n      }\n\n      // Gathering only id\n      let objectSelected = objectId\n      objectSelected = objectId.split(' {id}')[1]\n\n      // Retrieving metric queried by Grafana (default is '')\n      metricSplitted = query.targets[i].metricID.split(' {id}')\n\n      metricsForLegend[metricSplitted[1]] = metricSplitted[0]\n      devicesForLegend[query.targets[i].deviceID.split(' {id}')[1]] = query.targets[i].deviceID.split(' {id}')[0]\n      interfacesForLegend[query.targets[i].interfaceID.split(' {id}')[1]] = query.targets[i].deviceID.split(' {id}')[0] + \" / \" + query.targets[i].interfaceID.split(' {id}')[0]\n\n      // Tag request as complete\n      booleanArrayQueryReady[i] = true\n\n\n      //##################################################################\n      //##                      Building NetIM queries                  ##\n      //##################################################################\n      // Declaring all fields needed for a Riverbed creating instance request (data_defs)\n      // 12 known properties: \"metricClassId\", \"includeRawSummary\", \"endTime\", \"epoch\", \"durationMinutes\", \"metricId\", \"startTime\", \"maxRawDurationForSummaryInHours\", \"objectType\", \"objectId\", \"includeSummary\"\n      let dataDefs;\n      dataDefs = {\n        'startTime': queryTimeMillisecFrom,\n        'endTime': queryTimeMillisecTo,\n        'metricClassId': metricClassSelected,\n        'metricId': [metricSelected],\n        'objectType': objectType,\n        'objectId': [objectSelected]\n      }\n      // Adding these dataDefinitions to the array containing all datadefs\n      dataDefsWithList[i] = dataDefs;\n      // End of foreach query, moving to http request(s) section\n    }\n\n\n\n      //##################################################################\n      //##                      Queries treatment                       ##\n      //##################################################################\n\n    // To avoid same request, add fake request to dataDefsWithList\n    for (let index in booleanArrayQueryReady) {\n      if (booleanArrayQueryReady[index] === false) {\n        dataDefsWithList[index] = { 0: \"This artificial query was added\" };\n      }\n    }\n\n    // Create dataDefsWithList frozen\n    const fixedataDefsWithList = dataDefsWithList.map((x) => { return x })\n\n    // Create dataDefsWithList but with row-letter as key\n    let datadefsWithLetter = []\n    for (let i in query.targets) {\n      datadefsWithLetter[query.targets[i].refId] = fixedataDefsWithList[i]\n    }\n\n    // Creating mirror variable, it will contain information about duplicate query and incomplete query\n    // A master request is a request that will be send to NetIM and may be duplicated or not\n    // Incomplete query are not duplicated\n    let mirror = []\n    let found = false\n    let indexOfDuplicate = []\n    let alreadyFound = []\n    for (let dupCounter in dataDefsWithList) {\n      // If query is an incomplete query, tag it as artificial query\n      if (dataDefsWithList[dupCounter][0] === \"This artificial query was added\") {\n        mirror[dupCounter] = [query.targets[dupCounter].refId, dataDefsWithList[dupCounter][0]]\n        continue\n      }\n      // If the key is already tagged as duplicate, continue to next key (empty space in array are duplicate row)\n      if (alreadyFound.includes(dupCounter)) {\n        continue\n      }\n      // Searching now for duplicate\n      for (let dupCounterBis in dataDefsWithList) {\n        // If one of the other row is a duplicate (JSON.stringify is used to compare object fileds instead of object adress)\n        if ((JSON.stringify(dataDefsWithList[dupCounter]) === JSON.stringify(dataDefsWithList[dupCounterBis])) && dupCounter !== dupCounterBis) {\n          // Trigger boolean and push index of duplicate in array\n          found = true\n          indexOfDuplicate.push(dupCounterBis)\n        }\n      }\n      // If request is already saved, push duplicate index in master row (master won't be delete)\n      if (found === true) {\n        mirror[dupCounter] = [query.targets[dupCounter].refId]\n        for (let counter in indexOfDuplicate) {\n          mirror[dupCounter].push([query.targets[indexOfDuplicate[counter]].refId, indexOfDuplicate[counter]])\n          alreadyFound.push(indexOfDuplicate[counter])\n        }\n      // Else, save request as master\n      } else {\n        mirror[dupCounter] = [query.targets[dupCounter].refId]\n        alreadyFound.push(dupCounter)\n      }\n      // Reset variable\n      found = false\n      indexOfDuplicate = []\n    }\n\n\n    // Creating variable to send to NetIM, containing all query without duplicate and incomplete query\n    // In the mean time, creating clone but with letter as key\n    let sendingDataWithLetter = []\n    let sendingData = []\n    for (let i in mirror) {\n      // Dans le mirroir, les seuls indexs sont de vraies requêtes sauf les articifielles\n      if (mirror[i][1] !== \"This artificial query was added\") {\n        sendingDataWithLetter[mirror[i][0]] = datadefsWithLetter[mirror[i][0]]\n        sendingData.push(datadefsWithLetter[mirror[i][0]])\n      }\n    }\n\n\n    // Creating array to know which index is which letter in data sent to NetIM (e.g. 5 : B)\n    let indexOfLetterInDataDefsSent = []\n    let counter = 0\n    for (var key in sendingDataWithLetter) {\n      if (key === 'length' || !sendingDataWithLetter.hasOwnProperty(key)) continue;\n      indexOfLetterInDataDefsSent[counter] = key\n      counter++\n    }\n\n\n\n    //##################################################################\n    //##                      Sending NetIM queries                   ##\n    //##################################################################\n    // All promises (e.g http requests) are stored in this array\n    let promises = []\n    // Sending all datadefs to Riverbed NetIM (=Execute every promise)\n    for (let currentDataDefs in sendingData) {\n      promises[currentDataDefs] = this.doRequest({\n        url: this.urlReport,\n        data: sendingData[currentDataDefs],\n        method: 'POST'\n      });\n    }\n\n\n\n\n    //##################################################################\n    //##                                                              ##\n    //##                         GATHERING                            ##\n    //##                          NETIM's                             ##\n    //##                           DATA                               ##\n    //##                                                              ##\n    //##################################################################\n    //  Waiting for all promise to be returned by NetIM\n    return this.q.all(promises).then(responseQuery => {\n      console.log(\"#### RESPONSES PROCESSING ####\")\n\n\n    //##################################################################\n    //##                      Response reconstruction                 ##\n    //##################################################################\n    // Earlier, duplicated and incomplete request were deleted, we need to rebuilt them\n      // Freeze response\n      let reserved = responseQuery.map(x => x)\n      Object.freeze(reserved)\n\n      // Copy response in array with row-letter as key\n      let finalLetteredResponse = []\n      for (let i in reserved) {\n        finalLetteredResponse[indexOfLetterInDataDefsSent[i]] = reserved[i]\n      }\n\n      // Rebuild response with all duplicated query and incomplete query\n      let letterToGet\n      let corresIndex\n      for (let i in mirror) {\n        // Skip unique row of mirror (unique row is not a duplicated query)\n        if (mirror[i].length > 1)\n          for (let u in mirror[i]) {\n            if (u !== '0') {\n              // Duplicated query found, copying it at his corresponding index\n              if (mirror[i][u] !== \"This artificial query was added\") {\n                letterToGet = mirror[i][0]\n                corresIndex = indexOfLetterInDataDefsSent.indexOf(letterToGet)\n                finalLetteredResponse[mirror[i][u][0]] = reserved[corresIndex]\n              }\n              // Incomplete query found, adding it to response\n              else {\n                finalLetteredResponse[mirror[i][0]] = [\"This artificial query was re-added\"]\n              }\n            }\n          }\n      }\n\n      // Retrieve Grafana row order as user see them\n      let realOrder = []\n      for (let row in query.targets) {\n        realOrder.push(query.targets[row].refId)\n      }\n\n      // Ordering response in the same order as Grafana row order\n      let modify = []\n      for (let index in realOrder) {\n        modify[index] = finalLetteredResponse[realOrder[index]]\n      }\n      responseQuery = modify\n\n\n\n\n      // For each NetIM's response \n      for (let currentQuery in responseQuery) {\n        // Little fail in array duplication\n        if (currentQuery >= query.targets.length) {\n          console.log(\"FATAL ERROR NEED CORRECTION\")  // This bug seems to have vanished\n          continue\n        }\n\n        if (typeof responseQuery[currentQuery] === 'undefined') {\n          console.log('###### ROW ' + currentQuery + ' unexpected error : response is empty #####')\n          console.log(responseQuery[currentQuery])\n          continue;\n        }\n        if (responseQuery[currentQuery][0] === \"This artificial query was re-added\") {\n          console.log('Artificial request, skip')\n          continue\n        }\n        if (typeof responseQuery[currentQuery].data === 'undefined') {\n          console.log('###### ROW ' + currentQuery + ' unexpected error : no data in response  #####')\n          continue;\n        }\n\n        if (typeof responseQuery[currentQuery].data.items === 'undefined') {\n          console.log('###### DATA POINT ERROR FOR ROW ' + currentQuery + '  #####')\n          continue;\n        }\n\n        if (typeof responseQuery[currentQuery].data.items[0] === 'undefined') {\n          console.log('###### NO DATA POINT FOR ROW ' + currentQuery + '  #####')\n          continue;\n        }\n\n        // Datapoint is a list which will receive all datapoints in correct format [value, timestamp]\n        let datapoints = []\n\n        // Check timeshift\n        if (typeof query.targets[currentQuery].timeshift !== 'undefined') {\n          deltaTimeshift = query.targets[currentQuery].timeshift\n        } else {\n          deltaTimeshift = 0\n        }\n\n        // Get the metric requested in order to select it in samples from NetIM\n        metricSplitted = query.targets[currentQuery].metricID.split(' {id}')\n        metricHere = metricSplitted[1]\n\n        // valeurs is an array containing all data requested (rollup, timestamp, metric....)\n        let valeurs = responseQuery[currentQuery].data.items[0].samples.items\n\n        // Need to delete first empty datapoints\n        let untilAllEmptyDatapointsAreDeleted = true\n        while (untilAllEmptyDatapointsAreDeleted && valeurs.length > 0) {\n          if (valeurs[0].timestamp === '0') {\n            // Starting at index position 0, remove 1 element\n            valeurs.splice(0, 1)\n          } else {\n            // All empty points are deleted (they are in first positions)\n            untilAllEmptyDatapointsAreDeleted = false\n          }\n        }\n\n\n        //##################################################################\n        //##                   Generating differenciation list            ##\n        //##################################################################\n        // Sometimes NetIM response contains severals differents metrics for one source requested (e.g class 1, class 2, cpuIndex0, cpuIndex1...)\n        // Retrieves all keys field from samples (e.g timestamp, cpuUtil, availability...)\n        let allKeys = Object.keys(valeurs[0].values)\n        allKeysWithId = []\n        for (let k in allKeys) {\n          // Use correct format for angular dropdown ({text : y, value : x})\n          if (allKeys[k] != \"timestamp\" && allKeys[k] != metricHere) {\n            allKeysWithId.push({ 'text': allKeys[k], 'value': allKeys[k] })\n          }\n        }\n        // Assign allKeysWithId to differenciationList\n        query.targets[currentQuery].differenciationList = allKeysWithId\n        // Rebuild queryObject with differenciationList\n        currentGraal.targets[currentQuery].differenciationList = query.targets[currentQuery].differenciationList\n\n        // End of this section, now function netimGetDifferenciationList() will return differents choice to separate values\n\n\n\n\n\n        //##################################################################\n        //##                       Generating rollup list                 ##\n        //##################################################################\n        // Rollup list is built from fields in valeurs\n        let rollupListRaw = []\n        for (let i in valeurs) {\n          if (typeof valeurs[i].rollupAlgo !== 'undefined' && !rollupListRaw.includes(valeurs[i].rollupAlgo)) {\n            rollupListRaw.push(valeurs[i].rollupAlgo)\n          }\n        }\n        // Rollup list is recreated with correct format\n        rollupListFormated = []\n        for (let i in rollupListRaw) {\n          rollupListFormated.push({ 'text': rollupListRaw[i], 'value': rollupListRaw[i] })\n        }\n\n        // This section may be useless now, further tests are needed\n        let search = true\n        let compte = -1\n        if (typeof query.targets[this.convertAlphabetPosition(query.targets[currentQuery].refId)] === 'undefined') {\n          // 27 count is use as safety measure\n          while (search || compte === 27) {\n            compte += 1\n            if (currentGraal.targets[compte].refId === currentGraal.targets[currentQuery].refId) {\n              search = false\n            }\n          }\n          currentGraal.targets[compte].rollupList = rollupListFormated\n        } else {\n          // Store rollup list\n          currentGraal.targets[currentQuery].rollupList = rollupListFormated\n        }\n\n\n\n\n\n\n\n        //##################################################################\n        //##             Datapoints gathering for simple request          ##\n        //##################################################################      \n        // If there is no need to separate values from each over, we can build the datapoints variable \n\n        rollupBoolean = valeurs[0].rollup\n        // If rollup is needed (e.g. query > 24 hours), then we need to built the rollup list\n        if (rollupBoolean) {\n          rollupSelected = query.targets[currentQuery].rollupType\n          // If rollup is needed and no rollup is selected, use first rollup available as default\n          if ((typeof rollupSelected === 'undefined' || rollupSelected === '') && (rollupListRaw.length > 0)) {\n            // Case sensitive, strict string of characters \"avg\"\n            // If multi avg, it pick first encountered\n            var tryDefaultRollupAverage = rollupListRaw.find(a => a.includes(\"avg\"));\n            rollupSelected = tryDefaultRollupAverage\n            if (typeof tryDefaultRollupAverage === 'undefined') {\n              rollupSelected = rollupListRaw[0]\n            }\n          }\n        }\n\n        differenciationSelected = currentGraal.targets[currentQuery].differenciation\n\n        rollupBoolean = valeurs[0].rollup\n\n        if (typeof differenciationSelected !== 'undefined' && typeof query.targets[currentQuery].selectedCurve !== 'undefined') {\n          // Reset rawResults (array with all fields, not filtered (every className, ....))\n          currentGraal.targets[currentQuery].rawResults = []\n          // Filling datapoints\n          if (typeof valeurs[0].values[metricHere] === 'undefined') {\n            console.log(\"Ambiguous request, aborting\")\n            console.log(\"Metric recorded :\", metricHere)\n            console.log(\"values :\", valeurs)\n            break\n          }\n\n          for (let k in valeurs) {\n            if (rollupBoolean === false || (rollupBoolean === true && rollupSelected === valeurs[k].rollupAlgo)) {\n              currentGraal.targets[currentQuery].rawResults.push(valeurs[k].values)\n              let res;\n              // Timestamp received is a string, in seconds (need to be converted to int and milliseconds)\n              // Adding 60 seconds to synchronize probe's clock and Grafana's clock and timeshift (0 if no timeshift)\n              let timeStampInteger = (parseInt(valeurs[k].timestamp) + 60) + deltaTimeshift\n              // If there is a value\n              if (valeurs[k].values[metricHere] !== '') {\n                res = this.homeMadeRound(parseFloat(valeurs[k].values[metricHere].replace(\",\", \".\")), 5);\n              } else {\n                // Else, put 0\n                res = 0\n              }\n              // Adding couple [valeurs[k], timestamp] to datapoints list\n              datapoints.push([res, timeStampInteger])\n            }\n          }\n        }\n        //##################################################################\n        //##                    Curves list building                      ##\n        //##################################################################\n        // Browse all results to find avalaible choices (classD1, classD2, classD3 ...)\n        differenciationSelected = query.targets[currentQuery].differenciation\n\n        if (query.targets[currentQuery].differenciation !== '') {\n          currentGraal.targets[currentQuery].curvesAvalaibleList = []\n          currentGraal.targets[currentQuery].curvesAvalaibleDatapointed = {}\n\n          // If differenciationList length > 0 then there is work to do\n          if (typeof currentGraal.targets[currentQuery].differenciationList !== 'undefined' && currentGraal.targets[currentQuery].differenciationList.length >= 1) {\n            // Empty curvesList before creation\n            currentGraal.targets[currentQuery].curvesList = []\n            for (let u in currentGraal.targets[currentQuery].rawResults) {\n              // Avoid repetition\n              if (!currentGraal.targets[currentQuery].curvesList.includes(currentGraal.targets[currentQuery].rawResults[u][differenciationSelected])) {\n                currentGraal.targets[currentQuery].curvesList.push(currentGraal.targets[currentQuery].rawResults[u][differenciationSelected])\n              }\n            }\n            tempoTab = []\n            tempoTab = currentGraal.targets[currentQuery].curvesList\n            currentGraal.targets[currentQuery].curvesList = []\n            for (let v in currentGraal.targets[currentQuery].rawResults) {\n              // Avoid repetition\n              if (typeof tempoTab[v] !== 'undefined')\n                currentGraal.targets[currentQuery].curvesList.push({ 'text': tempoTab[v], 'value': tempoTab[v] })\n            }\n          }\n        }\n\n\n        //##################################################################\n        //##                 Differenciation data building                ##\n        //##################################################################\n        if (query.targets[currentQuery].selectedCurve !== '') {\n          selectedCurve = query.targets[currentQuery].selectedCurve\n          datapoints = []\n\n          // Filling datapoints\n          for (let k in currentGraal.targets[currentQuery].rawResults) {\n            if (currentGraal.targets[currentQuery].rawResults[k][differenciationSelected] === selectedCurve) {\n              currentGraal.targets[currentQuery].rawResults.push(currentGraal.targets[currentQuery].rawResults[k][metricHere])\n              let res;\n              let timeStampInteger = (parseInt(currentGraal.targets[currentQuery].rawResults[k].timestamp) + 60) + deltaTimeshift\n              if (currentGraal.targets[currentQuery].rawResults[k][metricHere] % 1 === 0) {\n                res = this.homeMadeRound(parseFloat(currentGraal.targets[currentQuery].rawResults[k][metricHere].replace(\",\", \".\")), 5);\n              }\n              // Change string to float \n              else if (typeof (currentGraal.targets[currentQuery].rawResults[k][metricHere]) === 'string') {\n                res = this.homeMadeRound(parseFloat(currentGraal.targets[currentQuery].rawResults[k][metricHere].replace(\",\", \".\")), 5);\n              }\n              // No change if float encountered\n              else if (currentGraal.targets[currentQuery].rawResults[k][metricHere] % 1 !== 0) {\n                res = this.homeMadeRound(currentGraal.targets[currentQuery].rawResults[k][metricHere], 5)\n              }\n              // Adding couple [currentGraal.targets[currentQuery].rawResults[k], timestamp] to datapoints list\n              deux = timeStampInteger\n              datapoints.push([res, timeStampInteger])\n            }\n          }\n        }\n\n\n\n        //##################################################################\n        //##                    Curve's legend generation                 ##\n        //##################################################################\n\n\n\n        // If objectId is in devicesForLegend tab, then it's a device\n        if (typeof devicesForLegend[responseQuery[currentQuery].data.items[0].objectId] !== 'undefined') {\n          deviceOrInterfaceName = devicesForLegend[responseQuery[currentQuery].data.items[0].objectId]\n        } else {\n          // Else, it's an interface\n          deviceOrInterfaceName = interfacesForLegend[responseQuery[currentQuery].data.items[0].objectId]\n        }\n        differenciationSelected = query.targets[currentQuery].differenciation\n        // Case of request with only differenciation \n        if (differenciationSelected == '' && query.targets[currentQuery].selectedCurve == '') {\n          metricId = metricHere\n        }\n\n        // Case of request with both differenciation and curve selection\n        if (differenciationSelected !== '' && query.targets[currentQuery].selectedCurve !== '') {\n          metricId = metricHere + \" (\" + differenciationSelected + \" \" + query.targets[currentQuery].selectedCurve + \")\"\n        }\n\n        // Label contains both deviceOrInterfaceName and metric name\n        let label = deviceOrInterfaceName + ' : ' + metricId\n\n        // In case of query with rollup (e.g. query with time range >= 24h)\n        if (typeof rollupSelected !== 'undefined') {\n          label = label + \" [\" + rollupSelected + \"]\"\n        }\n\n\n        // If user specifies \"alias\" field, then label is alias\n        if (typeof query.targets[currentQuery].customAlias !== 'undefined' && query.targets[currentQuery].customAlias.length > 0) {\n          label = query.targets[currentQuery].customAlias\n        } else {\n          //  If no alias is specified, if timeshift field is used, add the number of day to label\n          if (query.targets[currentQuery].timeshift > 0) {\n            label = label + \"_\" + query.targets[currentQuery].timeshift / 86400000 + \"day\"\n          }\n        }\n\n\n        //##################################################################\n        //##                        Build panel data                      ##\n        //##################################################################\n        // If differenciation is required and user did not select both differenciation and curve, do not send datapoints to panel\n        if (\n          (typeof currentGraal.targets[currentQuery].differenciationList !== 'undefined' &&\n            currentGraal.targets[currentQuery].differenciationList.length >= 1 &&\n            query.targets[currentQuery].selectedCurve == '') ||\n          (typeof currentGraal.targets[currentQuery].curvesList !== 'undefined' &&\n            currentGraal.targets[currentQuery].curvesList.length >= 1 &&\n            query.targets[currentQuery].selectedCurve == '')\n        ) {\n          // do nothing \n        } else {\n          // If user filled all required fields, send results to panel\n          let grafanaRefId = query.targets[currentQuery].refId;\n          // Object representating each row's of Grafana (contains deviceOrInterfaceName, meta informations, row's id, collection time, and datapoints)\n          let newTarget = {\n            // target is curve's legend\n            \"target\": label,\n            // meta is miscellaneous informations\n            \"meta\": { 'info 1': 'miscancellious' },\n            // refId is the letter of the row (A, B, C, D ...)\n            'refId': grafanaRefId,\n            // datapoints is a list containing all points retrieved by Riverbed AppResponse probe\n            \"datapoints\": datapoints\n          };\n          // Each target (or row) is insert into a list (will be send to Grafana)\n          dataPointsForGrafana.push(newTarget)\n          deltaTimeshift = 0\n        }\n      }\n      this.graal = currentGraal\n      // When no query built, this return avoid error\n      if (typeof responseQuery[0] === 'undefined') {\n        responseQuery.data = dataPointsForGrafana\n        return responseQuery\n      }\n      responseQuery.push({ 'desc': \"Object returned to panel\", 'data': dataPointsForGrafana })\n      // Return last entry, contains all data to display\n      return responseQuery[responseQuery.length - 1]\n    });\n  }\n}"]}