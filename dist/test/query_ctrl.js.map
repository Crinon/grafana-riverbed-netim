{"version":3,"sources":["../../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","target","sourceTypeTab","type","displayDeviceBox","displayInterfaceBox","displayDifferenciationAndCurveBox","deviceID","interfaceID","metricClassID","metricID","differenciation","selectedCurve","DOMextractedRefID","rollupType","rollupTab","listOfCurves","customAlias","timeshift","query","datasource","netimGetAllDevices","netimGetInterfacesFromDevice","netimGetAllMetricClasses","netimGetMetricsFromClass","netimGetDifferenciationList","refId","netimGetCuvesList","metricFindRollupQuery","disableAllBoxBool","toggleDeviceBool","toggleInterfaceBool","panelCtrl","refresh","console","log","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    this.scope = $scope;\n\n    // Critical attribute needed in datasource spec (self tests)\n    this.target.target = 'unused attribute';\n    // All source type available\n    this.target.sourceTypeTab = ['Device', 'Interface'];\n    // Attribute type correspond to source type (Device or Interface)\n    this.target.type = this.target.type;\n    // All boolean needed to display correct box (default is Device)\n    this.target.displayDeviceBox = this.target.displayDeviceBox;\n    this.target.displayInterfaceBox = this.target.displayInterfaceBox;\n    this.target.displayDifferenciationAndCurveBox = this.target.displayDifferenciationAndCurveBox;\n    // Attribute deviceID is the id of device selected \n    this.target.deviceID = this.target.deviceID;\n    // Attribute interfaceID is the id of the interface selected\n    this.target.interfaceID = this.target.interfaceID;\n    // Attribute metricClassID is the id of metric-class selected\n    this.target.metricClassID = this.target.metricClassID;\n    // Attribute metricID is the id of metric selected\n    this.target.metricID = this.target.metricID || \"\";\n    // Attribute differenciation is the differenciation of the metric selected (can be empty) \n    this.target.differenciation = this.target.differenciation;\n    // Depending of target.differenciation, multiple curve can be avalaible to print, user selects one\n    this.target.selectedCurve = this.target.selectedCurve;\n    // Attribute containing lettre from Grafana row\n    this.target.DOMextractedRefID = this.target.DOMextractedRefID;\n    this.target.rollupType = this.target.rollupType;\n    // this.target.rollupTab = [\"disabled\", \"aggregateavgrollup\", \"aggregateminrollup\", \"aggregatemaxrollup\", \"aggregatesumrollup\", \"durationweightedrollup\"];\n    this.target.rollupTab = []\n    this.target.listOfCurves\n    // Alias used or not by user\n    this.target.customAlias;\n    // Timeshift used or not by user\n    this.target.timeshift;\n  }\n\n\n  // These methods are called by boxes in query.editor.html and call methods from datasource.js\n\n  // Retreive all devices avalaible\n  getDeviceOptions(query) {\n    return this.datasource.netimGetAllDevices(query || '');\n  }\n\n  // Retreive all interfaces (from device in argument) avalaible\n  getInterfaceOptions() {\n    return this.datasource.netimGetInterfacesFromDevice(this.target.deviceID);\n  }\n\n  // Retreive all metric classes avalaible\n  getMetricClassOptions() {\n    return this.datasource.netimGetAllMetricClasses();\n  }\n\n  // Retreive all metrics avalaible for metric class in argument\n  getMetricOptions() {\n    return this.datasource.netimGetMetricsFromClass(this.target.metricClassID);\n  }\n\n  // Retreive all differenciation options avalaible and send current grafana query-row letter\n  getDifferenciationOptions() {\n    return this.datasource.netimGetDifferenciationList(this.target.refId || '');\n  }\n\n  // Retreives all curves returned by NetIM and send current grafana query-row letter\n  getAvailableCurveOptions() {\n    this.target.listOfCurves = this.datasource.netimGetCuvesList(this.target.refId)\n    return this.target.listOfCurves;\n  }\n\n  // Retreive all rollup algorythm avalaible and send current grafana query-row letter\n  getRollupOptions() {\n    return this.datasource.metricFindRollupQuery(this.target.refId);\n  }\n\n  // When changing source type, bind False to all boolean (all boxes disapear)\n  disableAllBoxBool() {\n    this.target.displayDeviceBox = false;\n    this.target.displayInterfaceBox = false;\n    this.target.displayDifferenciationAndCurveBox = false;\n  }\n\n  // If source type 'Device' is selected, only his boolean is set to True\n  toggleDeviceBool() {\n    this.disableAllBoxBool();\n    this.target.displayDeviceBox = true;\n  }\n\n  // If source type 'Interface' is selected, only his boolean is set to True\n  toggleInterfaceBool() {\n    this.disableAllBoxBool();\n    this.target.displayInterfaceBox = true;\n  }\n\n  // Method triggered by source type selection (a new query is being made), cleaning all up\n  runningSelect() {\n    // Reset attributes\n    this.target.deviceID = \"\";\n    this.target.interfaceID = \"\";\n    this.target.metricClassID = \"\";\n    this.target.metricID = \"\";\n    this.target.differenciation = \"\";\n    this.target.selectedCurve = \"\";\n    this.target.displayDifferenciationAndCurveBox = false;\n    // Toggling boolean depending of selected case of combobox 'Source type' (this will display concerned boxes):\n    if (this.target.type == \"Device\") {\n      this.toggleDeviceBool();\n    }\n    if (this.target.type == \"Interface\") {\n      this.toggleInterfaceBool();\n    }\n  }\n\n  // Method triggering /query in datasource.js\n  onChangeInternal() {\n    // this.target.displayDifferenciationAndCurveBox = this.datasource.needToggle(this.target.refId)\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    console.log(\"\\nREFRESHED\\n\");\n  }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}